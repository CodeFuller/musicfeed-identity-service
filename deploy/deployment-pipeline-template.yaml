parameters:
- name: EnvName
  type: string
- name: EnvDisplayName
  type: string
- name: SubdomainName
  type: string

jobs:
- deployment: DeployJob
  displayName: Deploy to ${{ parameters.EnvDisplayName }} Environment
  environment: ${{ parameters.EnvName }}
  variables:
    - group: MusicFeedVariables
    - group: MusicFeedVariables.${{ parameters.EnvName }}
    - group: MusicFeedVariables.IdentityService.${{ parameters.EnvName }}
  strategy:
    runOnce:
      deploy:
        steps:
        - download: BuildPipeline
          displayName: Download Helm Chart
          artifact: helm-chart

        - download: BuildPipeline
          displayName: Download DB Migration Scripts
          artifact: db-migration-scripts

        - powershell: |
            Install-Module -Name SimplySql -RequiredVersion 1.9.0 -Scope CurrentUser -Force
          displayName: Install SimplySql Module

        - powershell: |
            $scriptsDirectoryPath = '$(Pipeline.Workspace)/BuildPipeline/db-migration-scripts'

            Import-Module -Name SimplySql -RequiredVersion 1.9.0
            
            Open-PostGreConnection -ConnectionString '$(IdentityService.IdentityDBConnectionString)'

            Write-Host "Applying migrations for IdentityServer database ..."
            $migrationScript = Get-Content "$scriptsDirectoryPath/Migrate-IdentityServer-Database.sql"
            Invoke-SqlUpdate -query $migrationScript -verbose 

            Write-Host "Applying migrations for Identity database ..."
            $migrationScript = Get-Content "$scriptsDirectoryPath/Migrate-Identity-Database.sql"
            Invoke-SqlUpdate -query $migrationScript -verbose 

            Close-SqlConnection
          displayName: Apply DB Migrations

        - task: HelmDeploy@0
          displayName: Install Helm Chart
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: AWS EKS Cluster
            namespace: $(GlobalConfig.Kubernetes.Namespace)
            command: upgrade
            chartName: $(Pipeline.Workspace)/BuildPipeline/helm-chart/$(HelmChartName)
            releaseName: $(ServiceName)
            overrideValues: |
              certificateArn=$(GlobalConfig.AWS.CertificateArn)
              domainName=${{ parameters.SubdomainName }}.$(GlobalConfig.DomainName)
              identityDBConnectionString="$(IdentityService.IdentityDBConnectionString)"
              googleClientId=$(IdentityService.GoogleClientId)
              googleClientSecret=$(IdentityService.GoogleClientSecret)
              webClientAddress=$(IdentityService.WebClientAddress)
            waitForExecution: false

        - task: Kubernetes@1
          displayName: Wait For Rollout
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: AWS EKS Cluster
            namespace: $(GlobalConfig.Kubernetes.Namespace)
            command: rollout
            arguments: status -w deployment/$(ServiceName) --timeout=5m
